/**
 * @file fileSystem.h
 * @author icejj (icejj@rish.com.tw), roy4801 (me@roy4801.tw)
 * @brief File System
 * @version 0.1
 * @date 2020-05-03
 */
#pragma once

#include "Rish/rlpch.h"
#include "Rish/Core/Log.h"

namespace rl {

/**
 * @brief File object generated by FileSystem::List()
 */
class RL_API File
{
public:
	File(const std::string &path) : m_path(path)
    {}
    File(const fs::path &p) : m_path(p)
    {}

	std::string getPath() const { return m_path.string(); }
	std::string getFilename() const { return m_path.filename().string(); }
	std::string getExtenstion() const { return m_path.extension().string(); }

	File parent() { return m_path.parent_path(); }

	bool isFile() { return fs::is_regular_file(fs::absolute(m_path)); }
	bool isDirectory() { return fs::is_directory(fs::absolute(m_path)); }

private:
	fs::path m_path;
};



/**
 * @brief File System class
 * @details The class that handles the filesystem and provide various convenient utilities.
 */
class RL_API FileSystem
{
public:
	/**
     * @brief Get the Current Directory
     * @return std::string Path
     */
	static std::string GetCurrentDirectory();

	/**
     * @brief Get the Current Directory Path object
     * @return fs::path Path
     */
	static fs::path GetCurrentDirectoryPath();

	/**
     * @brief Set the Current Directory by std::string
     * @param path Path
     */
	static void SetCurrentDirectory(const std::string &path);

	/**
     * @brief Set the Current Directory by Path object
     * @param path Path Object
     */
	static void SetCurrentDirectoryPath(const fs::path &path);

	/**
	 * @brief Get relative path
	 * @param path Path string
	 */
	static std::string RelativePath(const std::string &path);

	/**
	 * @brief Normalize the path
	 * @param path path
	 * @return Normalized path
	 *
	 * @code{.cpp}
	 * rl::FileSystem::Normalize("a/b/c/../../d/e");
	 * // a\d\e
	 * @endcode
	 */
	static std::string Normalize(const std::string &path);

	/**
	 * @brief Get the absolute path
	 * @param path path
	 * @return absolute path
	 */
    static std::string AbsolutePath(const std::string &path);

    /**
     * @brief Is absolute path
     * @param path Path
     * @return bool
     */
    static bool IsAbsolutePath(const std::string &path);

	/**
     * @brief Create a File
     * @param path Path to the new file
     */
	static bool CreateFile(const std::string &path);

	/**
	 * @brief Delete a File
	 * @param path Path to the new file
	 */
	static bool DeleteFile(const std::string &path);

	/**
     * @brief Is the file exist
     *
     * @param path Path to the file
     * @return true Exist
     * @return false Not exist
     */
	static bool FileExists(const std::string &path);

	/**
     * @brief Get the file size
     *
     * @param path Path to the file
     * @return int Size of the file
     */
	static int GetFileSize(const std::string &path);

	/**
     * @brief Is the path a directory
     *
     * @param path Path to the directory
     * @return true It's a directory
     * @return false It's not a directory
     *
     * @code{.cpp}
     * rl::FileSystem::IsDirectory("assets/") == true;
     * rl::FileSystem::IsDirectory(R"(C:\Users\Rish\Desktop\rish\dod\Sandbox\assets)") == true;
     * rl::FileSystem::IsDirectory("assets/1.png") == false;
     * @endcode
     */
	static bool IsDirectory(const std::string &path);

	/**
     * @brief Is the path a file
     *
     * @param path  Path to the file
     * @return true It's a file
     * @return false It's not a file
     *
     * @code{.cpp}
     * rl::FileSystem::IsFile("assets/") == false;
     * rl::FileSystem::IsFile(R"(C:\Users\Rish\Desktop\rish\dod\Sandbox\assets)") == false;
     * rl::FileSystem::IsFile("assets/1.png") == true;
     * @endcode
     */
	static bool IsFile(const std::string &path);

	/**
     * @brief Read the file in binary mode and returns a new array
     * @param path Path to the file in FileSystem
     * @return char* File content
     *
     * @code{.cpp}
     * size_t size;
     * auto buf = rl::FileSystem::ReadWholeFile("assets/test.bin", size);
     * @endcode
     */
	static Scope<char[]> ReadWholeFile(const std::string &path, size_t &siz);

	/**
     * @brief Read the file in binary mode into a specified buffer
     * @warning buffer cannot be `nullptr`
     * @param path Path to the file in FileSystem
     * @return true Success
     * @return false Failed
     */
	static bool ReadFile(const std::string &path, void *buffer, int size = 0);
	// TODO: change the `void* buffer` to `char *buffer`?

	/**
     * @brief Read the file in text mode
     *
     * @param path Path to the file in FileSystem
     * @return std::string Content
     */
	static std::string ReadTextFile(const std::string &path);

	/**
     * @brief Write the file in binary mode
     *
     * @param path Path to the file in FileSystem
     * @param buffer The buffer contains bytes will be written into file
     * @param size The length of data
     * @return true Succeed to write the file
     * @return false Failed to write the file
     */
	static bool WriteFile(const std::string &path, const char *buffer, int size);

	/**
     * @brief Write the file in text mode
     *
     * @note If the file is not exist, the it wonâ€™t generate a file.\n
     *       You should create the file before you access
     *
     * @param path Path to the file in VFS
     * @param text The buffer contains bytes will be written into file
     * @param size The length of data
     * @return true Succeed to write the file
     * @return false Failed to write the file
     */
	static bool WriteTextFile(const std::string &path, const std::string &text, const int size);

	/**
     * @brief List the file or directory under the path
     * 
     * @param path Path that ready to list 
     * @param vec The buffer contains all the files or directories under the path 
     * @return true Exist some file under the path
     * @return false No file exist under the path
     *
     * @code{.cpp}
     * std::vector<rl::File> fileList;
     * rl::FileSystem::List("assets/", fileList);
     * @endcode
     */
	static bool List(const std::string &path, std::vector<File> &vec);
};

} // namespace rl

/// @class rl::FileSystem
/// @ingroup core
///